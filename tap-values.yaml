#@ load("@ytt:data", "data")
---
profile: full
#excluded_packages:
#  - tekton.tanzu.vmware.com
ceip_policy_disclosed: true # Installation fails if this is set to 'false'
buildservice:
  kp_default_repository: #@ "{}/tap/build-service".format(data.values.container_registry.hostname)
  kp_default_repository_username: #@ data.values.container_registry.username
  kp_default_repository_password: #@ data.values.container_registry.password
  tanzunet_username: #@ data.values.tanzunet.username
  tanzunet_password: #@ data.values.tanzunet.password
  enable_automatic_dependency_updates: true
  descriptor_name: full

supply_chain: testing_scanning

ootb_supply_chain_testing_scanning:
  registry:
    server: #@ data.values.container_registry_supply_chain_ootb.hostname
    repository: #@ data.values.container_registry_supply_chain_ootb.repository
  gitops:
    ssh_secret: 'git-ssh'
    server_address: https://github.com/
    repository_owner: #@ data.values.gitops.repo_owner
    repository_name: #@ data.values.gitops.repo_name
    branch: #@ data.values.gitops.branch
    commit_strategy: pull_request
    pull_request:
      server_kind: github
      commit_branch: ''
      pull_request_title: 'Please review and merge PR to delivery application to the production environment'
      pull_request_body: 'generated by Tanzu Application Platform supply chain'

learningcenter:
  ingressDomain: #@ "learning-center.{}".format(data.values.ingress.domain)
  # ingressSecret:
  #   secretName: #@ "{}/{}".format(data.values.ingress.contour_tls_namespace,data.values.ingress.contour_tls_secret)
tap_gui:
  ingressEnabled: true
  ingressDomain: #@ data.values.ingress.domain
  service_type: ClusterIP # NodePort for distributions that don't support LoadBalancer
  tls:
    secretName: #@ data.values.ingress.tap_gui_tls_secret
    namespace: #@ data.values.ingress.tap_gui_tls_namespace
  app_config:
    # catalog:
    #   locations:
    #     - type: url
    #       target: https://gitlab.eng.vmware.com/project-star/pstar-backstage-poc/-/blob/master/sample-catalogs/demo/catalog-info.yaml
    organization:
      name: #@ data.values.organization.name
    supplyChain:
      enablePlugin: true
    backend:
      baseUrl: #@ "https://tap-gui.{}".format(data.values.ingress.domain)
      cors:
        origin: #@ "https://tap-gui.{}".format(data.values.ingress.domain)
    app:
      baseUrl: #@ "https://tap-gui.{}".format(data.values.ingress.domain)
    # backend:
    #   baseUrl: #@ "http://tap-gui.{}".format(data.values.ingress.domain)
    #   cors:
    #     origin: #@ "http://tap-gui.{}".format(data.values.ingress.domain)
    # app:
    #   baseUrl: #@ "http://tap-gui.{}".format(data.values.ingress.domain)
    auth:
      allowGuestAccess: true
      environment: development
      providers:
        okta:
          development:
            clientId: #@ data.values.tap_gui.auth.okta_client_id
            clientSecret: #@ data.values.tap_gui.auth.okta_client_secret
            audience: #@ data.values.tap_gui.auth.okta_audience
    integrations:
      github: # Other integrations available see NOTE below
        - host: github.com
          token: #@ data.values.tap_gui.integrations.github
      # gitlab:
      #   - host: gitlab.eng.vmware.com
      #     apiBaseUrl: https://gitlab.eng.vmware.com/api/v4
      #     token: #@ data.values.tap_gui.integrations.gitlab
    proxy:
      # '/gitlabci':
      #   target: 'https://gitlab.eng.vmware.com/api/v4'
      #   allowedMethods: ['GET']
      #   headers:
      #     PRIVATE-TOKEN: #@ data.values.tap_gui.integrations.gitlab
      '/metadata-store':
        target: 'https://metadata-store-app.metadata-store:8443/api/v1'
        changeOrigin: true
        secure: false
        headers:
          Authorization: #@ "Bearer {}".format(data.values.tap_gui.integrations.metadatatoken)
          X-Custom-Source: project-star
    # support multiple cluster
    kubernetes:
      serviceLocatorMethod:
        type: 'multiTenant'
      clusterLocatorMethods:
        - type: 'config'
          clusters:
            - url: #@ data.values.clusters.host.cluster_url
              name: #@ data.values.clusters.host.cluster_name
              authProvider: serviceAccount
              serviceAccountToken: #@ data.values.clusters.host.cluster_token
              skipTLSVerify: true
    #         # - url: #@ data.values.clusters.run.cluster_url
    #         #   name: #@ data.values.clusters.run.cluster_name
    #         #   authProvider: serviceAccount
    #         #   serviceAccountToken: #@ data.values.clusters.run.cluster_token
    #         #   skipTLSVerify: true

metadata_store:
  app_service_type: ClusterIP # (optional) Defaults to LoadBalancer. Change to NodePort for distributions that don't support LoadBalancer
  ns_for_export_app_cert: '*'

contour:
  envoy:
    service:
      annotations:
        external-dns.alpha.kubernetes.io/hostname: #@ "*.{}".format(data.values.ingress.domain)
      type: LoadBalancer

accelerator:
  domain: #@ "accelerator.{}".format(data.values.ingress.domain)
  ingress:
    include: true
  # tls:
  #   secretName: #@ data.values.ingress.contour_tls_secret
  #   namespace: #@ data.values.ingress.contour_tls_namespace
  server:
    service_type: ClusterIP

cnrs:
  domain_name: #@ "cnr.{}".format(data.values.ingress.domain)
  domain_template: '{{.Name}}-{{.Namespace}}.{{.Domain}}'
  # default_tls_secret: #@ "{}/{}".format(data.values.ingress.contour_tls_namespace,data.values.ingress.contour_tls_secret)

grype:
  namespace: #@ data.values.developer_namespace
  targetImagePullSecret: registry-credentials
# support multiple cluster
appliveview:
  ingressEnabled: true
  ingressDomain: #@ data.values.ingress.domain

